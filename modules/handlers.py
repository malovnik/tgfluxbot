"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞.
"""

import os
import tempfile
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from modules.config import (
    AWAITING_CONFIRMATION, SETTINGS,
    SETTING_NUM_OUTPUTS, SETTING_ASPECT_RATIO, SETTING_PROMPT_STRENGTH,
    SETTING_OPENAI_MODEL, SETTING_GENERATION_CYCLES, SETTING_AUTO_CONFIRM_PROMPT,
    ASPECT_RATIOS, OPENAI_MODELS, 
    logger, AUTHORIZED_USERS, BOT_PRIVATE,
    AWAITING_BENCHMARK_PROMPT, BENCHMARK_SETTINGS, BENCHMARK_PROMPT_STRENGTHS,
    BENCHMARK_GUIDANCE_SCALES, BENCHMARK_INFERENCE_STEPS, MAX_BENCHMARK_ITERATIONS,
    AWAITING_BENCHMARK_OPTIONS, AWAITING_BENCHMARK_COUNT
)
from modules.settings import (
    get_user_settings, update_user_settings, reset_user_settings
)
from modules.ai_services import (
    generate_prompt, analyze_image, transcribe_audio, 
    analyze_image_content, generate_image, download_file,
    generate_image_with_params
)

# =================================================================
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# =================================================================

async def check_authorization(update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not BOT_PRIVATE:
        return True  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    is_authorized = False
    
    for auth_user in AUTHORIZED_USERS:
        if user_id == auth_user["chat_id"] or username == auth_user["username"]:
            is_authorized = True
            break
    
    if not is_authorized:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞: user_id={user_id}, username={username}")
    
    return is_authorized

async def send_unauthorized_message(update: Update):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö."""
    await update.message.reply_text(
        "‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.\n\n"
        "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
    )

# =================================================================
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# =================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    user = update.effective_user
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.\n\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ:\n'
        f'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º\n'
        f'üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n'
        f'üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ö–æ–∂–µ–≥–æ —Å –≤–∞–º–∏\n\n'
        f'–ù–∞–ø–∏—à–∏—Ç–µ /settings —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n'
        f'–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    await update.message.reply_text(
        "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1Ô∏è‚É£ *–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:* –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "3Ô∏è‚É£ *–ü–æ –æ–±—Ä–∞–∑—Ü—É:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Ö–æ–∂–µ–µ —Å –≤–∞–º–∏\n\n"
        
        "–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–º–ø—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.\n\n"
        
        "*–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1-4)\n"
        "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (1:1, 16:9...)\n"
        "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É (0.75-1.0)\n\n"
        
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç.",
        parse_mode="Markdown"
    )

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    await update.message.reply_text("–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END

# =================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
# =================================================================

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    
    keyboard = [
        [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
        [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
        [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
        [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
        [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
        [InlineKeyboardButton("–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", callback_data="set_auto_confirm_prompt")],
        [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
        [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
    openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    auto_confirm_status = "–í–∫–ª—é—á–µ–Ω–æ ‚úÖ" if settings.get('auto_confirm_prompt', False) else "–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå"
    
    await update.message.reply_text(
        f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
        f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
        f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
        f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
        f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
        f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n"
        f"üîÑ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {auto_confirm_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SETTINGS

async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    try:
        if query.data == "close_settings":
            await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return ConversationHandler.END
        
        elif query.data == "reset_settings":
            reset_user_settings(user_id)
            
            await query.message.edit_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
            )
            return ConversationHandler.END
            
        elif query.data == "set_aspect_ratio":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            keyboard = []
            for aspect_ratio in ASPECT_RATIOS:
                keyboard.append([InlineKeyboardButton(f"{aspect_ratio}", callback_data=f"aspect_ratio_{aspect_ratio}")])
            keyboard.append([InlineKeyboardButton("–°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="aspect_ratio_custom")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "üìê –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            
            return SETTING_ASPECT_RATIO
            
        elif query.data == "set_num_outputs":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            keyboard = []
            for i in range(1, 5):  # –û—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                keyboard.append([InlineKeyboardButton(f"{i}", callback_data=f"num_outputs_{i}")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "üñº –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å:",
                reply_markup=reply_markup
            )
            
            return SETTING_NUM_OUTPUTS
            
        elif query.data == "set_prompt_strength":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É
            keyboard = []
            for value in [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
                keyboard.append([InlineKeyboardButton(f"{value}", callback_data=f"prompt_strength_{value}")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É:\n\n"
                "üí° –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å—É, "
                "–Ω–æ –º–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 0.7-0.8",
                reply_markup=reply_markup
            )
            
            return SETTING_PROMPT_STRENGTH
            
        elif query.data == "set_openai_model":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenAI
            keyboard = []
            for model_id, model_name in OPENAI_MODELS.items():
                keyboard.append([InlineKeyboardButton(f"{model_name}", callback_data=f"openai_model_{model_id}")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:",
                reply_markup=reply_markup
            )
            
            return SETTING_OPENAI_MODEL
            
        elif query.data == "set_generation_cycles":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            keyboard = []
            for i in range(1, 6):  # –û—Ç 1 –¥–æ 5 —Ü–∏–∫–ª–æ–≤
                keyboard.append([InlineKeyboardButton(f"{i}", callback_data=f"generation_cycles_{i}")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
                "üí° –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç "
                "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
                reply_markup=reply_markup
            )
            
            return SETTING_GENERATION_CYCLES
            
        elif query.data == "set_auto_confirm_prompt":
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            keyboard = []
            keyboard.append([InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data="auto_confirm_true")])
            keyboard.append([InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å ‚ùå", callback_data="auto_confirm_false")])
            keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text(
                "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:\n\n"
                "üí° –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é "
                "–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
                reply_markup=reply_markup
            )
            
            return SETTING_AUTO_CONFIRM_PROMPT
            
        elif query.data == "start_benchmark":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await query.message.edit_text(
                "üî¨ *–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
                "—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
                "–ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.",
                parse_mode="Markdown"
            )
            
            return AWAITING_BENCHMARK_PROMPT
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:100]}... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    
    return SETTINGS

async def num_outputs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —á–∏—Å–ª–∞
        if not query.data.startswith("num_outputs_"):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
        num_outputs = int(query.data.split("_")[-1])
        update_user_settings(user_id, "num_outputs", num_outputs)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        await query.message.edit_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {num_outputs}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await asyncio.sleep(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(user_id)
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        await query.message.edit_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {query.data}: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return ConversationHandler.END

async def aspect_ratio_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback data
        if ":" in query.data:
            aspect_ratio = query.data.split("_")[-1]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤–∞–ª–∏–¥–Ω–æ–µ
            if aspect_ratio in ASPECT_RATIOS:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_user_settings(user_id, "aspect_ratio", aspect_ratio)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await query.message.edit_text(
                    f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {aspect_ratio}\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                    parse_mode="Markdown"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                await asyncio.sleep(1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings = get_user_settings(user_id)
                keyboard = [
                    [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
                    [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
                    [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
                    [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
                    [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
                    [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
                    [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
                openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
                
                await query.message.edit_text(
                    f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
                    f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
                    f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
                    f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
                    f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
                    f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                
                return SETTINGS
                
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        await settings_command(update, context)
        return SETTINGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: {e}")
        await query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω.\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞."
        )
        return ConversationHandler.END

async def handle_aspect_ratio_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "16:9")
    if ":" in user_input and user_input in ASPECT_RATIOS:
        user_id = update.effective_user.id
        update_user_settings(user_id, "aspect_ratio", user_input)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        message = await update.message.reply_text(
            f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_input}\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(user_id)
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        await update.message.reply_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return SETTING_ASPECT_RATIO

async def prompt_strength_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not query.data.startswith("prompt_strength_"):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–∑ callback_data
        prompt_strength = float(query.data.split("_")[-1])
        update_user_settings(user_id, "prompt_strength", prompt_strength)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {prompt_strength}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(user_id)
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        await query.message.edit_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {query.data}: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return ConversationHandler.END

async def openai_model_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not query.data.startswith("openai_model_"):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ callback_data
        model_id = query.data.replace("openai_model_", "")
        
        if model_id not in OPENAI_MODELS:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI: {model_id}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        update_user_settings(user_id, "openai_model", model_id)
        model_name = OPENAI_MODELS.get(model_id, model_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å OpenAI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(user_id)
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        await query.message.edit_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {query.data}: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return ConversationHandler.END

async def generation_cycles_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not query.data.startswith("generation_cycles_"):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∏–∑ callback_data
        cycles = int(query.data.split("_")[-1])
        
        if cycles < 1 or cycles > 5:
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {cycles}")
            await query.message.edit_text("–í—ã–±—Ä–∞–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        update_user_settings(user_id, "generation_cycles", cycles)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {cycles}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(user_id)
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        await query.message.edit_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {query.data}: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return ConversationHandler.END

async def auto_confirm_prompt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not query.data.startswith("auto_confirm_"):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        auto_confirm = query.data == "auto_confirm_true"
        update_user_settings(user_id, "auto_confirm_prompt", auto_confirm)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if auto_confirm else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        await query.message.edit_text(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ {status}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = get_user_settings(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="set_num_outputs")],
            [InlineKeyboardButton("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="set_aspect_ratio")],
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É", callback_data="set_prompt_strength")],
            [InlineKeyboardButton("–ú–æ–¥–µ–ª—å OpenAI", callback_data="set_openai_model")],
            [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="set_generation_cycles")],
            [InlineKeyboardButton("–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", callback_data="set_auto_confirm_prompt")],
            [InlineKeyboardButton("üî¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", callback_data="start_benchmark")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="reset_settings")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="close_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        openai_model_name = OPENAI_MODELS.get(settings['openai_model'], settings['openai_model'])
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        auto_confirm_status = "–í–∫–ª—é—á–µ–Ω–æ ‚úÖ" if settings['auto_confirm_prompt'] else "–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå"
        
        await query.message.edit_text(
            f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*:\n\n"
            f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['num_outputs']}\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {settings['aspect_ratio']}\n"
            f"‚öñÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É: {settings['prompt_strength']}\n"
            f"üß† –ú–æ–¥–µ–ª—å OpenAI: {openai_model_name}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['generation_cycles']}\n"
            f"üîÑ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {auto_confirm_status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SETTINGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        await query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞.\n"
            f"–û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞."
        )
        return ConversationHandler.END

# =================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# =================================================================

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["user_request"] = update.message.text
    context.user_data["request_type"] = "text"
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        user_id = update.effective_user.id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ ChatGPT
        prompt = await generate_prompt(update.message.text, user_id)
        if not prompt:
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["prompt"] = prompt
        
        return await show_prompt_confirmation(update, context, message, prompt)
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_duration = update.message.voice.duration
        voice_file_size = update.message.voice.file_size
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {voice_duration} —Å–µ–∫, —Ä–∞–∑–º–µ—Ä: {voice_file_size} –±–∞–π—Ç")
        
        if voice_duration > 60:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 60 —Å–µ–∫—É–Ω–¥
            await message.edit_text("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 60 —Å–µ–∫—É–Ω–¥.")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        voice_file = await update.message.voice.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_voice:
            voice_path = temp_voice.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await voice_file.download_to_drive(voice_path)
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {voice_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not os.path.exists(voice_path) or os.path.getsize(voice_path) == 0:
            logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(voice_path):
                os.remove(voice_path)
                
            return ConversationHandler.END
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
        transcription = await transcribe_audio(voice_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(voice_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {voice_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        if not transcription:
            await message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["user_request"] = transcription
        context.user_data["request_type"] = "voice"
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        await message.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{transcription}\n\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        user_id = update.effective_user.id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ ChatGPT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        prompt = await generate_prompt(transcription, user_id)
        if not prompt:
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["prompt"] = prompt
        
        return await show_prompt_confirmation(update, context, message, prompt)
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
        
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    message = await update.message.reply_text("üñº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.photo or len(update.message.photo) == 0:
            logger.error("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            await message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        photo_size = update.message.photo[-1].file_size
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º {photo_size} –±–∞–π—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ—Ä–µ–º —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º)
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_photo:
            photo_path = temp_photo.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await photo_file.download_to_drive(photo_path)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {photo_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not os.path.exists(photo_path) or os.path.getsize(photo_path) == 0:
            logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            await message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(photo_path):
                os.remove(photo_path)
                
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        user_id = update.effective_user.id
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        image_description = await analyze_image_content(photo_path, user_id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(photo_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        if not image_description:
            await message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["user_request"] = image_description
        context.user_data["request_type"] = "image"
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        await message.edit_text("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        prompt = await analyze_image(image_description, user_id)
        if not prompt:
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["prompt"] = prompt
        
        return await show_prompt_confirmation(update, context, message, prompt)
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def show_prompt_confirmation(update: Update, context, message, prompt):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if settings.get("auto_confirm_prompt", False):
        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è —á—Ç–æ –∏ –ø—Ä–∏ callback_data="prompt_ok"
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.edit_text("üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–º–ø—Ç
        user_request = context.user_data.get("user_request")
        request_type = context.user_data.get("request_type", "text")
        cycles = settings.get("generation_cycles", 1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–∞—Ö
        for cycle in range(1, cycles + 1):
            if cycles > 1:
                await message.edit_text(f"üé® –¶–∏–∫–ª {cycle}/{cycles}: –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç...")
                
                # –í –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
                if cycle > 1:
                    if request_type == "image":
                        prompt = await analyze_image(user_request, user_id)
                    else:
                        prompt = await generate_prompt(user_request, user_id)
                        
                    if not prompt:
                        await message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ü–∏–∫–ª–µ {cycle}. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
                        continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if cycles > 1:
                await message.edit_text(f"üé® –¶–∏–∫–ª {cycle}/{cycles}: –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç)...")
            else:
                await message.edit_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç)...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_urls = await generate_image(prompt, user_id)
            if not image_urls:
                if cycles > 1:
                    await message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ü–∏–∫–ª–µ {cycle}. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
                    continue
                else:
                    await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return ConversationHandler.END
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for url in image_urls:
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=url)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            cycle_text = f" (—Ü–∏–∫–ª {cycle}/{cycles})" if cycles > 1 else ""
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç{cycle_text}:\n`{prompt}`",
                parse_mode="Markdown"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await message.delete()
        
        # –°–æ–æ–±—â–∞–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
        if cycles > 1:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {cycles} –≤–∞—Ä–∏–∞–Ω—Ç{'–æ–≤' if cycles > 1 else ''}."
            )
            
        return ConversationHandler.END
    
    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="prompt_ok"),
            InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="prompt_retry")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="prompt_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    request_type_icon = {
        "text": "üìù",
        "voice": "üé§",
        "image": "üñº"
    }.get(context.user_data.get("request_type", "text"), "üìù")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.edit_text(
        f"{request_type_icon} *–í–∞—à –∑–∞–ø—Ä–æ—Å:*\n{context.user_data.get('user_request', '')[:100]}...\n\n"
        f"üß† *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:*\n`{prompt}`\n\n"
        f"–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —ç—Ç–∏–º –ø—Ä–æ–º–ø—Ç–æ–º?",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return AWAITING_CONFIRMATION

async def prompt_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å callback_data
        if query.data not in ["prompt_ok", "prompt_retry", "prompt_cancel"]:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return ConversationHandler.END
        
        if query.data == "prompt_ok":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ–º–ø—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            user_id = query.from_user.id
            settings = get_user_settings(user_id)
            cycles = settings.get("generation_cycles", 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–º–ø—Ç
            user_request = context.user_data.get("user_request")
            prompt = context.user_data.get("prompt")
            request_type = context.user_data.get("request_type", "text")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–º–ø—Ç —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if not user_request or not prompt:
                await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return ConversationHandler.END
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            await query.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_message = await context.bot.send_message(
                chat_id=update.effective_chat.id, 
                text=f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({cycles} —Ü–∏–∫–ª{'–æ–≤' if cycles > 1 else ''})..."
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–∞—Ö
            for cycle in range(1, cycles + 1):
                if cycles > 1:
                    await status_message.edit_text(f"üé® –¶–∏–∫–ª {cycle}/{cycles}: –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç...")
                    
                    # –í –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
                    if cycle > 1:
                        if request_type == "image":
                            prompt = await analyze_image(user_request, user_id)
                        else:
                            prompt = await generate_prompt(user_request, user_id)
                            
                        if not prompt:
                            await status_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ü–∏–∫–ª–µ {cycle}. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
                            continue
                
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if cycles > 1:
                        await status_message.edit_text(f"üé® –¶–∏–∫–ª {cycle}/{cycles}: –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç)...")
                    else:
                        await status_message.edit_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç)...")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_urls = await generate_image(prompt, user_id)
                    if not image_urls:
                        if cycles > 1:
                            await status_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ü–∏–∫–ª–µ {cycle}. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
                            continue
                        else:
                            await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                            return ConversationHandler.END
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for url in image_urls:
                        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=url)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                    cycle_text = f" (—Ü–∏–∫–ª {cycle}/{cycles})" if cycles > 1 else ""
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç{cycle_text}:\n`{prompt}`",
                        parse_mode="Markdown"
                    )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
                await status_message.delete()
                
                # –°–æ–æ–±—â–∞–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
                if cycles > 1:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {cycles} –≤–∞—Ä–∏–∞–Ω—Ç{'–æ–≤' if cycles > 1 else ''}."
                    )
                
        elif query.data == "prompt_retry":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
            await query.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç...")
            
            user_request = context.user_data.get("user_request")
            if not user_request:
                await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            user_id = update.effective_user.id
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            request_type = context.user_data.get("request_type", "text")
            if request_type == "image":
                prompt = await analyze_image(user_request, user_id)
            else:
                prompt = await generate_prompt(user_request, user_id)
                
            if not prompt:
                await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["prompt"] = prompt
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="prompt_ok"),
                    InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="prompt_retry")
                ],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="prompt_cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            request_type_icon = {
                "text": "üìù",
                "voice": "üé§",
                "image": "üñº"
            }.get(request_type, "üìù")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.message.edit_text(
                f"{request_type_icon} *–í–∞—à –∑–∞–ø—Ä–æ—Å:*\n{user_request[:100]}...\n\n"
                f"üß† *–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:*\n`{prompt}`\n\n"
                f"–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —ç—Ç–∏–º –ø—Ä–æ–º–ø—Ç–æ–º?",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            return AWAITING_CONFIRMATION
            
        elif query.data == "prompt_cancel":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é
            await query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {query.data}: {e}")
        await query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:100]}... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    
    return ConversationHandler.END

async def benchmark_prompt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = update.message.text
    
    if not prompt or len(prompt) < 10:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return AWAITING_BENCHMARK_PROMPT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["benchmark_prompt"] = prompt
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    total_combinations = len(BENCHMARK_PROMPT_STRENGTHS) * len(BENCHMARK_GUIDANCE_SCALES) * len(BENCHMARK_INFERENCE_STEPS)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ({total_combinations})", callback_data="run_all_combinations")],
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", callback_data="set_combinations_count")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üî¨ *–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*\n\n"
        f"–ü—Ä–æ–º–ø—Ç: `{prompt[:100]}{'...' if len(prompt) > 100 else ''}`\n\n"
        f"–í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_combinations}\n\n"
        f"‚Ä¢ –°–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(BENCHMARK_PROMPT_STRENGTHS)} –∑–Ω–∞—á–µ–Ω–∏–π (0.5-1.0)\n"
        f"‚Ä¢ Guidance Scale: {len(BENCHMARK_GUIDANCE_SCALES)} –∑–Ω–∞—á–µ–Ω–∏—è (2.0-3.5)\n"
        f"‚Ä¢ –®–∞–≥–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {len(BENCHMARK_INFERENCE_STEPS)} –∑–Ω–∞—á–µ–Ω–∏—è (20-50)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return AWAITING_BENCHMARK_OPTIONS

async def benchmark_options_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "back_to_settings":
        return await settings_command(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    prompt = context.user_data.get("benchmark_prompt")
    if not prompt:
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    total_combinations = len(BENCHMARK_PROMPT_STRENGTHS) * len(BENCHMARK_GUIDANCE_SCALES) * len(BENCHMARK_INFERENCE_STEPS)
    
    if query.data == "run_all_combinations":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ
        if total_combinations > MAX_BENCHMARK_ITERATIONS:
            await query.message.edit_text(
                f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ({total_combinations}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({MAX_BENCHMARK_ITERATIONS}).\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π."
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
            keyboard = [
                [InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ({total_combinations})", callback_data="run_all_combinations")],
                [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π", callback_data="set_combinations_count")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                f"üî¨ *–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*\n\n"
                f"–ü—Ä–æ–º–ø—Ç: `{prompt[:100]}{'...' if len(prompt) > 100 else ''}`\n\n"
                f"–í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_combinations}\n\n"
                f"‚Ä¢ –°–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(BENCHMARK_PROMPT_STRENGTHS)} –∑–Ω–∞—á–µ–Ω–∏–π (0.5-1.0)\n"
                f"‚Ä¢ Guidance Scale: {len(BENCHMARK_GUIDANCE_SCALES)} –∑–Ω–∞—á–µ–Ω–∏—è (2.0-3.5)\n"
                f"‚Ä¢ –®–∞–≥–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {len(BENCHMARK_INFERENCE_STEPS)} –∑–Ω–∞—á–µ–Ω–∏—è (20-50)\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return AWAITING_BENCHMARK_OPTIONS
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–æ–ø—É—Å—Ç–∏–º–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–æ–Ω –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        context.user_data["benchmark_iterations"] = total_combinations
        await query.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø—Ä–æ–≥–æ–Ω–∞ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ({total_combinations}).\n"
            f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
        )
        return await run_benchmark(update, context, prompt, total_combinations)
        
    elif query.data == "set_combinations_count":
        await query.message.edit_text(
            f"üìä *–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π*\n\n"
            f"–í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_combinations}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_BENCHMARK_ITERATIONS}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ—Ç 1 –¥–æ {min(total_combinations, MAX_BENCHMARK_ITERATIONS)}):"
        )
        return AWAITING_BENCHMARK_COUNT
    
    return AWAITING_BENCHMARK_OPTIONS

async def benchmark_count_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await check_authorization(update):
        await send_unauthorized_message(update)
        return ConversationHandler.END
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        prompt = context.user_data.get("benchmark_prompt")
        if not prompt:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        total_combinations = len(BENCHMARK_PROMPT_STRENGTHS) * len(BENCHMARK_GUIDANCE_SCALES) * len(BENCHMARK_INFERENCE_STEPS)
        max_iterations = min(total_combinations, MAX_BENCHMARK_ITERATIONS)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ
        try:
            count = int(update.message.text.strip())
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return AWAITING_BENCHMARK_COUNT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if count < 1:
            await update.message.reply_text(
                "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1."
            )
            return AWAITING_BENCHMARK_COUNT
        elif count > max_iterations:
            await update.message.reply_text(
                f"‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({count}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ ({max_iterations}).\n"
                f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {max_iterations}."
            )
            count = max_iterations
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["benchmark_iterations"] = count
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥–æ–Ω–∞
        status_message = await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {count}\n"
            f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
        )
        
        return await run_benchmark(update, context, prompt, count)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AWAITING_BENCHMARK_COUNT

async def run_benchmark(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str, iterations: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
    if update.callback_query:
        chat_id = update.callback_query.message.chat_id
        status_message = await context.bot.send_message(
            chat_id=chat_id,
            text="üî¨ *–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*\n\n"
                f"–ü—Ä–æ–º–ø—Ç: `{prompt[:100]}{'...' if len(prompt) > 100 else ''}`\n\n"
                "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è...",
            parse_mode="Markdown"
        )
    else:
        chat_id = update.effective_chat.id
        status_message = await update.message.reply_text(
            "üî¨ *–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*\n\n"
            f"–ü—Ä–æ–º–ø—Ç: `{prompt[:100]}{'...' if len(prompt) > 100 else ''}`\n\n"
            "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è...",
            parse_mode="Markdown"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞
    base_params = BENCHMARK_SETTINGS.copy()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞
    all_parameter_combinations = []
    for prompt_strength in BENCHMARK_PROMPT_STRENGTHS:
        for guidance_scale in BENCHMARK_GUIDANCE_SCALES:
            for inference_steps in BENCHMARK_INFERENCE_STEPS:
                all_parameter_combinations.append({
                    "prompt_strength": prompt_strength,
                    "guidance_scale": guidance_scale,
                    "num_inference_steps": inference_steps
                })
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    parameter_combinations = all_parameter_combinations
    if iterations < len(all_parameter_combinations):
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, —á–µ–º –≤—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        import random
        parameter_combinations = random.sample(all_parameter_combinations, iterations)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try:
        total_iterations = len(parameter_combinations)
        for i, params in enumerate(parameter_combinations, 1):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text(
                f"üî¨ *–ü—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {i}/{total_iterations}*\n\n"
                f"‚Ä¢ –°–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {params['prompt_strength']}\n"
                f"‚Ä¢ Guidance Scale: {params['guidance_scale']}\n"
                f"‚Ä¢ –®–∞–≥–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {params['num_inference_steps']}\n\n"
                "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
                parse_mode="Markdown"
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            generation_params = base_params.copy()
            generation_params.update(params)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            image_urls = await generate_image_with_params(prompt, generation_params)
            
            if not image_urls:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ #{i}:\n"
                         f"‚Ä¢ –°–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {params['prompt_strength']}\n"
                         f"‚Ä¢ Guidance Scale: {params['guidance_scale']}\n"
                         f"‚Ä¢ –®–∞–≥–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {params['num_inference_steps']}"
                )
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            caption = (
                f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–æ–Ω–∞ #{i}/{total_iterations}*\n\n"
                f"‚Ä¢ –°–∏–ª–∞ –ø—Ä–æ–º–ø—Ç–∞: {params['prompt_strength']}\n"
                f"‚Ä¢ Guidance Scale: {params['guidance_scale']}\n"
                f"‚Ä¢ –®–∞–≥–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {params['num_inference_steps']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for url in image_urls:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=url,
                    caption=caption,
                    parse_mode="Markdown"
                )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥–æ–Ω
        await status_message.edit_text(
            f"‚úÖ *–ü—Ä–æ–≥–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            f"–ë—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_iterations} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        await status_message.edit_text(
            f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–æ–Ω–∞:*\n{str(e)[:100]}\n\n"
            f"–ë—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {i-1} –∏–∑ {total_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π.",
            parse_mode="Markdown"
        )
    
    return ConversationHandler.END 